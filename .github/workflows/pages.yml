name: Build & Deploy (GitHub Pages)

on:
  push:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: true

env:
  SITE_DIR: docusaurus-site
  WASM_OUT: dist-wasm              # <-- wherever your buildVampireWasm.sh writes
  STATIC_TARGET: static/vampire-runner

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # Node for Docusaurus
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm
          cache-dependency-path: ${{ env.SITE_DIR }}/package-lock.json

      # Emscripten toolchain (emcc, emcmake, emconfigure, etc.)
      - name: Setup Emscripten
        uses: mymindstorm/setup-emsdk@v14

      - name: Verify toolchains
        run: |
          emcc -v
          node -v
          npm -v

      # Build your WASM at repo root
      - name: Make build script executable
        run: chmod +x ./buildVampireWasm.sh

      - name: Build WASM
        run: ./buildVampireWasm.sh

      # Copy WASM outputs into Docusaurus /static so they get bundled into /build
      - name: Stage WASM into Docusaurus static/
        run: |
          mkdir -p "${{ env.SITE_DIR }}/${{ env.STATIC_TARGET }}"
          if [ -d "${{ env.WASM_OUT }}" ]; then
            cp -a "${{ env.WASM_OUT }}/." "${{ env.SITE_DIR }}/${{ env.STATIC_TARGET }}/"
          else
            echo "WASM_OUT folder '${{ env.WASM_OUT }}' not found; skipping copy."
          fi

      # Install & build Docusaurus (in subfolder)
      - name: Install deps
        working-directory: ${{ env.SITE_DIR }}
        run: npm ci

      - name: Build Docusaurus
        working-directory: ${{ env.SITE_DIR }}
        run: npm run build
        # (equivalent to: npx docusaurus build)

      # Publish only the built site
      - name: Configure Pages
        uses: actions/configure-pages@v5

      - name: Upload artifact (Docusaurus build/)
        uses: actions/upload-pages-artifact@v3
        with:
          path: ${{ env.SITE_DIR }}/build

  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

